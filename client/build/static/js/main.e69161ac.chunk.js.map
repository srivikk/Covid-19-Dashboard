{"version":3,"sources":["components/Dashboard/BarChart.js","components/Dashboard/PieChart.js","components/Dashboard/Table.js","components/Dashboard/Map.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","data","className","labels","datasets","label","TotalCases","TotalRecovered","TotalDeaths","backgroundColor","borderColor","borderWidth","options","legend","display","title","text","responsiv","PieChart","console","log","JSON","stringify","StyledTableCell","withStyles","theme","head","color","palette","common","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles1","makeStyles","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","useStyles","table","minWidth","DataTable","React","useState","setPage","setRowsPerPage","filterInput","setFilterInput","columns","useMemo","Header","accessor","useTable","useFilters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","emptyRows","min","length","TableContainer","component","Paper","value","onChange","e","target","undefined","placeholder","Table","TableHead","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","TableBody","slice","row","i","getRowProps","cells","cell","getCellProps","style","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","MapChart","tooltipContent","setTooltipContent","onMouseEnter","geo","d","properties","NAME","onMouseLeave","data-tip","projectionConfig","scale","geography","geographies","find","s","ISO3","ISO_A3","key","rsmKey","default","fill","outline","pressed","formControl","margin","selectEmpty","marginTop","Dashboard","mapData","setMapdata","tableData","setTabledata","chartData","setChartdata","sendData","setSendData","newfetchData","a","axios","get","result","useEffect","Promise","all","then","aggregateData","AppBar","background","position","Toolbar","Typography","variant","class","id","FormControl","InputLabel","Select","name","MenuItem","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e69161ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport './BarChart.css'\r\n\r\nconst BarChart = ({ data }) => {\r\n  return (\r\n    <div className=\"chart\">\r\n      <Bar \r\n        data={\r\n          {\r\n            labels: ['TotalCases', 'TotalRecovered', 'TotalDeaths'],\r\n            datasets: [{\r\n              label: ['Population'],\r\n              data: [data[0].TotalCases, data[0].TotalRecovered, data[0].TotalDeaths],\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n              // barThickness: 6\r\n            }]\r\n          }\r\n        }\r\n        options={{\r\n          legend: { display: false },\r\n          title: {\r\n            display: true,\r\n            text: 'Frequency of different cases'\r\n          },responsiv: false\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarChart","import React from \"react\";\r\nimport { Pie } from 'react-chartjs-2';\r\nimport './PieChart.css'\r\n\r\nconst PieChart = ({ data }) => {\r\nconsole.log('callingfrom bar ' + JSON.stringify(data))\r\n  return (\r\n    <div className=\"chart\">\r\n      <Pie\r\n        data={{\r\n          labels: ['TotalCases', 'TotalRecovered', 'TotalDeaths'],\r\n          datasets: [{\r\n            label: ['Population'],\r\n            data: [data[0].TotalCases, data[0].TotalRecovered, data[0].TotalDeaths],\r\n            backgroundColor: [\r\n              'rgba(255, 99, 132, 0.2)',\r\n              'rgba(54, 162, 235, 0.2)',\r\n              'rgba(255, 206, 86, 0.2)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n              'rgba(54, 162, 235, 1)',\r\n              'rgba(255, 206, 86, 1)',\r\n            ],\r\n            borderWidth: 1\r\n          }]\r\n        }}\r\n        options={{\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PieChart","import React, {useState,useMemo} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { useTable, useFilters } from \"react-table\";\r\nimport { withStyles,makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    // backgroundColor: \"theme.palette.common.black\",\r\n    backgroundColor: \"blue\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nexport default function DataTable({ data }) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  \r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const columns = useMemo(\r\n    () => [\r\n          {\r\n            Header: \"Countries\",\r\n            accessor: \"Country,Other\"\r\n          },\r\n          {\r\n            Header: \"Total Cases\",\r\n            accessor: \"TotalCases\"\r\n          },\r\n          {\r\n            Header: \"Total Recovered\",\r\n            accessor: \"TotalRecovered\"\r\n          },\r\n          {\r\n            Header: \"Total Deaths\",\r\n            accessor: \"TotalDeaths\"\r\n          },\r\n    ],\r\n    []\r\n  );\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setFilter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useFilters\r\n    );\r\n    const handleFilterChange = e => {\r\n      const value = e.target.value || undefined;\r\n      setFilter(\"Country,Other\", value);\r\n      setFilterInput(value);\r\n    };\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      \r\n      <TableContainer component={Paper}>\r\n      <input\r\n          value={filterInput}\r\n          onChange={handleFilterChange}\r\n          placeholder={\"Search Country\"}\r\n        />\r\n        <Table className={classes.table} aria-label=\"simple table\" {...getTableProps()}>\r\n          <TableHead>\r\n          {headerGroups.map(headerGroup => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <StyledTableCell\r\n                  {...column.getHeaderProps()}>{column.render(\"Header\")}\r\n                </StyledTableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n          </TableHead>\r\n          <TableBody {...getTableBodyProps()}>\r\n            \r\n          {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <StyledTableRow {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <StyledTableCell {...cell.getCellProps()}>{cell.render(\"Cell\")}</StyledTableCell>\r\n                  );\r\n                })}\r\n              </StyledTableRow>\r\n            );\r\n          })}\r\n          {emptyRows > 0 && (\r\n            <StyledTableRow style={{ height: 53 * emptyRows }}>\r\n              <StyledTableCell colSpan={6} />\r\n            </StyledTableRow>\r\n          )}\r\n          </TableBody> \r\n          <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n              colSpan={3}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>   \r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}","import React,{useState} from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\nimport './Map.css'\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst MapChart = ({data}) => {\r\n  const [tooltipContent, setTooltipContent] = useState('');\r\n    const onMouseEnter = (geo, d = { value: 'NA' }) => {\r\n    return () => {\r\n      setTooltipContent(`${geo.properties.NAME}: 'TotalCases':${d.TotalCases},'TotalRecovered':${d.TotalRecovered},'TotalDeaths':${d.TotalDeaths} `);\r\n    };\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    setTooltipContent('');\r\n  };\r\n  return (\r\n    <>\r\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{scale:150}}>\r\n        <ZoomableGroup>\r\n        <Geographies geography={geoUrl}>\r\n        {({ geographies }) =>\r\n            geographies.map(geo => {\r\n              const d = data[0].find(s => s.ISO3 === geo.properties.ISO_A3);\r\n              return(\r\n              <Geography\r\n              key={geo.rsmKey}\r\n              geography={geo}\r\n              onMouseEnter={onMouseEnter(geo, d)}\r\n              onMouseLeave = {onMouseLeave}\r\n              style={{\r\n                default: {\r\n                  fill: \"#D6D6DA\",\r\n                  outline: \"none\"\r\n                },\r\n                hover: {\r\n                  fill: \"#F53\",\r\n                  outline: \"none\"\r\n                },\r\n                pressed: {\r\n                  fill: \"#E42\",\r\n                  outline: \"none\"\r\n                }\r\n              }}\r\n            />\r\n              );\r\n            })\r\n        }\r\n        </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MapChart;","import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport BarChart from './BarChart';\r\nimport PieChart from './PieChart';\r\nimport DataTable from './Table';\r\nimport MapChart from './Map';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport './sidebyside.css'\r\n\r\n//For top title\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n\r\n  const [mapData, setMapdata] = useState();\r\n  const [tableData, setTabledata] = useState();\r\n  const [chartData, setChartdata] = useState();\r\n  const [sendData, setSendData] = useState(false);\r\n\r\n  useEffect(() => {\r\n      const result = [axios.get('/data'), axios.get('/aggregateData')]\r\n      Promise.all(result).then(([data, aggregateData]) => {\r\n        setMapdata([data.data])\r\n        setTabledata([data.data])\r\n        setChartdata(aggregateData.data)\r\n        setSendData(true)\r\n      })\r\n  }, [])\r\n\r\nasync function newfetchData(e) {\r\n  const result = await axios.get(`/aggregateDatadisposable?continent=${e.target.value}`)\r\n  setChartdata([result.data])\r\n  setSendData(true)\r\n}\r\n\r\nuseEffect(()=>{\r\n  newfetchData()\r\n},[])\r\n  console.log(chartData)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={classes.root}>\r\n      <AppBar style={{ background: '#2E3B55' }} position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Covid-19 Dashboard\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      </div>\r\n      <p class=\"MapTitle\">Cases across World(World Map)</p>\r\n      <div id = \"Map\">\r\n      {sendData ? <MapChart data={mapData} /> : null}\r\n      </div>\r\n\r\n      <p class=\"ChartsTitle\">Cases across World(Visual Representation)</p>\r\n\r\n      <FormControl className = {classes.formControl}>\r\n        <InputLabel id = \"Select Continent\" >Select Continent</InputLabel>\r\n        <Select name = \"continent\" id = \"continent\" onChange={newfetchData}>\r\n          <MenuItem value = \"All\">World</MenuItem>\r\n          <MenuItem value = \"Europe\">Europe</MenuItem>\r\n          <MenuItem value = \"NorthAmerica\">North America</MenuItem>\r\n          <MenuItem value = \"Asia\">Asia</MenuItem>\r\n          <MenuItem value = \"SouthAmerica\">South America</MenuItem>\r\n          <MenuItem value = \"Africa\">Africa</MenuItem>\r\n          <MenuItem value = \"AustraliaOceania\">Australia/Oceania</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      \r\n      <div id = \"Chart\">\r\n      <div id = \"BarChart\" >{sendData ? <BarChart  data={chartData}  /> : null}</div>\r\n      <div id = \"PieChart\">{sendData ? <PieChart  data={chartData}  /> : null}</div>\r\n      \r\n      </div>\r\n      <p class=\"TableTitle\">Cases across World(Tabular Representation)</p>\r\n      <div id = \"Table\">\r\n        {sendData ? <DataTable data={tableData[0]} />:null}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\nimport Dashboard from './components/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <Dashboard />\n  );\n}\nexport default App\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}